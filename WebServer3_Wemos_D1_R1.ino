// Подключаем библиотеки

#include <WebSocketsClient.h>
#include "ArduinoJson.h"
#define VREF 3.27  // esp12 ~ 3.3
#define DIV_R1 50000
#define DIV_R2 2000

// Определяем название и пароль точки доступа
const char* ssid = "ITS";
const char* password = "daycom214";

// Определяем адрес сервера (например "192.168.1.3")
const char* ADDR = "test.websocket.alexrusakov.ru";  //

// Определяем url подключения
const char* URL = "/";

// Определяем порт
const uint16_t PORT = 7000;

// Создаём массив для отправки
int sdata[2]{ 1984, 11276 };

// Создаём массив для получения
unsigned long rdata[3]{ 0 };

// Кол-во элементов массива для получения
const size_t glen = sizeof(rdata) / sizeof(rdata[0]);
int Gmode = 0;    // глобалка, в которо хранится текущее состояние платы
int tmpMode = 0;  // глобалка для сравнения изменения состояния режима работы светильника
float Gvoltage = 0;
float GcurretnVoltage = 0;
float GcurrentLon = 0;
float GcurrentLat = 0;
// Создаём экземпляр класса клиента
WebSocketsClient webSocket;
StaticJsonDocument<300> parsed;

//общий json с исходными данными
char JSONSend[] = "{\"command\":\"setDeviceClientData\",\"clientUUID\":\"fd237235-cdd7-4a13-8258-test-ilia\",\"clientData\":{\"lampON\":true,\"deviceStatus\":0,\"buttonStatus\":\"down\",\"voltage\":5}}";
char jss[] = "{\"command\":\"deviceDataChanged\",\"deviceUUID\":\"01_10_2025_test_device1\",\"deviceData\":{\"dataKey\":\"deviceStatus\",\"dataValue\":50}}";
bool falseInit = false;  // разовая инициализация
String mac = "";

const long interval = 500;  // период отправки состояния GPS
unsigned long previousMillis = 0;
const long interval2 = 10000;  // период отправки состояния АКБ
unsigned long previousMillis2 = 0;
const long interval3 = 1000;  // период отправки состояния Кнопки, если данные изменились
unsigned long previousMillis3 = 0;

#define BP1 14         // D5
#define BP2 4          // D2
#define BP3 5          // D1
#define BP4 16         // D0
#define BUTTON_PIN 12  // PIN D6
#define dynPin 13  // PIN D7

////////////////////////////////////////////////// тестовый массив координа со стравы
//float glat[] = { 47.6758770, 47.6758570, 47.6758320, 47.6758160, 47.6758120, 47.6758060, 47.6758060, 47.6758030, 47.6758180, 47.6758770, 47.6758910, 47.6758140, 47.6758130, 47.6758580, 47.6758960, 47.6759330, 47.6759510, 47.6759570, 47.6759620, 47.6759720, 47.6760010, 47.6760240, 47.6760300, 47.6760610, 47.6760780, 47.6760950, 47.6761070, 47.6761180, 47.6761280, 47.6761350, 47.6761440, 47.6761520, 47.6761630, 47.6761820, 47.6761890, 47.6761960, 47.6762120, 47.6762180, 47.6762230, 47.6762290, 47.6762350, 47.6762390, 47.6762450, 47.6762460, 47.6762480, 47.6762490, 47.6762510, 47.6762530, 47.6762540, 47.6762560, 47.6762570, 47.6762590, 47.6762710, 47.6762860, 47.6762980, 47.6763070, 47.6763140, 47.6763150, 47.6763320, 47.6763390, 47.6763570, 47.6763610, 47.6763590, 47.6763570, 47.6763600, 47.6763670, 47.6763750, 47.6763880, 47.6764030, 47.6764190, 47.6764330, 47.6764440, 47.6764510, 47.6764600, 47.6764720, 47.6764860, 47.6765090, 47.6765150, 47.6765390, 47.6765460, 47.6765610, 47.6765640, 47.6765700, 47.6765760, 47.6765860, 47.6765950, 47.6766010, 47.6766010, 47.6766070, 47.6766250, 47.6766420, 47.6766520, 47.6766570, 47.6766600, 47.6766600, 47.6766600, 47.6766580, 47.6766560, 47.6766580, 47.6766620, 47.6766710, 47.6766760, 47.6766800, 47.6766910, 47.6767020, 47.6767250, 47.6767330, 47.6767490, 47.6767530, 47.6767590, 47.6767670, 47.6767730, 47.6767810, 47.6767870, 47.6767960, 47.6768080, 47.6768210, 47.6768330, 47.6768440, 47.6768570, 47.6768700, 47.6768830, 47.6768950, 47.6769070, 47.6769210, 47.6769360, 47.6769530, 47.6769690, 47.6769790, 47.6769880, 47.6769990, 47.6770090, 47.6770220, 47.6770360, 47.6770510, 47.6770640, 47.6770760, 47.6770900, 47.6771180, 47.6771270, 47.6771570, 47.6771670, 47.6771940, 47.6772020, 47.6772130, 47.6772210, 47.6772290, 47.6772360, 47.6772450, 47.6772530, 47.6772650, 47.6772780, 47.6772950, 47.6773020, 47.6773100, 47.6773230, 47.6773380, 47.6773510, 47.6773610, 47.6773680, 47.6773840, 47.6773900, 47.6773960, 47.6774220, 47.6774330, 47.6774430, 47.6774520, 47.6774600, 47.6774720, 47.6774720, 47.6774850, 47.6774970, 47.6775120, 47.6775280, 47.6775440, 47.6775690, 47.6775780, 47.6776110, 47.6776230, 47.6776500, 47.6776760, 47.6776850, 47.6777010, 47.6777160, 47.6777420, 47.6777520, 47.6777810, 47.6777870, 47.6777960, 47.6777930, 47.6777900, 47.6777870, 47.6777860, 47.6777890, 47.6777930, 47.6777860, 47.6777830, 47.6777930, 47.6777970, 47.6778000, 47.6778070, 47.6778190, 47.6778370, 47.6778500, 47.6778660, 47.6778780, 47.6778890, 47.6778990, 47.6779060, 47.6779120, 47.6779140, 47.6779200, 47.6779240, 47.6779270, 47.6779340, 47.6779430, 47.6779530, 47.6779590, 47.6779640, 47.6779630, 47.6779630, 47.6779690, 47.6779730, 47.6779770, 47.6779860, 47.6779950, 47.6780010, 47.6780050, 47.6780090, 47.6780050, 47.6780000, 47.6779960, 47.6779900, 47.6779840, 47.6779760, 47.6779740, 47.6779740, 47.6779750, 47.6779740, 47.6779710, 47.6779700, 47.6779680, 47.6779670, 47.6779680, 47.6779700, 47.6779730, 47.6779740, 47.6779760, 47.6779790, 47.6779800, 47.6779810, 47.6779810, 47.6779790, 47.6779790, 47.6779750, 47.6779720, 47.6779740, 47.6779730, 47.6779730, 47.6779750, 47.6779830, 47.6779960, 47.6779990, 47.6780210, 47.6780290, 47.6780440, 47.6780640, 47.6780710, 47.6780850, 47.6780970, 47.6781000, 47.6781080, 47.6781170, 47.6781340, 47.6781390, 47.6781540, 47.6781580, 47.6781690, 47.6781710, 47.6781840, 47.6781870, 47.6782000, 47.6782040, 47.6782190, 47.6782220, 47.6782280, 47.6782300, 47.6782380, 47.6782400, 47.6782470, 47.6782480, 47.6782560, 47.6782590, 47.6782710, 47.6782750, 47.6782980, 47.6783070, 47.6783350, 47.6783440, 47.6783780, 47.6783890, 47.6784250, 47.6784370, 47.6784730, 47.6784850, 47.6785140, 47.6785250, 47.6785590, 47.6785700, 47.6785990, 47.6786090, 47.6786420, 47.6786520, 47.6786840, 47.6786940, 47.6787260, 47.6787350, 47.6787530, 47.6787760, 47.6788040, 47.6788140, 47.6788390, 47.6788730, 47.6788830, 47.6789150, 47.6789240, 47.6789590, 47.6789730, 47.6790090, 47.6790220, 47.6790530, 47.6790640, 47.6790940, 47.6791030, 47.6791360, 47.6791470, 47.6791770, 47.6792080, 47.6792180, 47.6792540, 47.6792640, 47.6793010, 47.6793110, 47.6793440, 47.6793550, 47.6793890, 47.6794000, 47.6794350, 47.6794500, 47.6794880, 47.6795010, 47.6795290, 47.6795640, 47.6795760, 47.6796130, 47.6796270, 47.6796570, 47.6796690, 47.6797030, 47.6797160, 47.6797500, 47.6797620, 47.6797960, 47.6798070, 47.6798390, 47.6798500, 47.6798830, 47.6798950, 47.6799330, 47.6799450, 47.6799820, 47.6799940, 47.6800340, 47.6800480, 47.6800750, 47.6801030, 47.6801410, 47.6801540, 47.6801900, 47.6802020, 47.6802360, 47.6802440, 47.6802710, 47.6802810, 47.6803140, 47.6803240, 47.6803610, 47.6803710, 47.6804070, 47.6804190, 47.6804490, 47.6804600, 47.6804910, 47.6805030, 47.6805300, 47.6805380, 47.6805530, 47.6805680, 47.6805930, 47.6806020, 47.6806190, 47.6806370, 47.6806640, 47.6806750, 47.6806900, 47.6807080, 47.6807380, 47.6807470, 47.6807810, 47.6807930, 47.6808280, 47.6808390, 47.6808690, 47.6808780, 47.6809080, 47.6809180, 47.6809480, 47.6809580, 47.6809840, 47.6809930, 47.6810200, 47.6810520, 47.6810630, 47.6811000, 47.6811120, 47.6811490, 47.6811610, 47.6811990, 47.6812120, 47.6812460, 47.6812580, 47.6812910, 47.6813020, 47.6813320, 47.6813400, 47.6813710, 47.6813830, 47.6814130, 47.6814230, 47.6814580, 47.6814690, 47.6815060, 47.6815170, 47.6815570, 47.6815710, 47.6816110, 47.6816240, 47.6816520, 47.6816840, 47.6816950, 47.6817290, 47.6817420, 47.6817700, 47.6817790, 47.6818100, 47.6818210, 47.6818500, 47.6818610, 47.6818880, 47.6818980, 47.6819330, 47.6819420, 47.6819770, 47.6819870, 47.6820200, 47.6820290, 47.6820640, 47.6820770, 47.6821080, 47.6821200, 47.6821500, 47.6821600, 47.6821780, 47.6821960, 47.6822150, 47.6822280, 47.6822420, 47.6822550, 47.6822650, 47.6822710, 47.6822730, 47.6822710, 47.6822670, 47.6822670, 47.6822660, 47.6822650, 47.6822670, 47.6822700, 47.6822740, 47.6822790, 47.6822820, 47.6822850, 47.6822910, 47.6822950, 47.6822970, 47.6823010, 47.6823090, 47.6823180, 47.6823310, 47.6823430, 47.6823660, 47.6823730, 47.6824040, 47.6824150, 47.6824540, 47.6824660, 47.6825070, 47.6825240, 47.6825550, 47.6825930, 47.6826050, 47.6826380, 47.6826480, 47.6826770, 47.6826860, 47.6827170, 47.6827270, 47.6827610, 47.6827710, 47.6828060, 47.6828170, 47.6828570, 47.6828700, 47.6829000, 47.6829280, 47.6829670, 47.6829800, 47.6830170, 47.6830300, 47.6830630, 47.6830730, 47.6831090, 47.6831190, 47.6831560, 47.6831670, 47.6832050, 47.6832170, 47.6832550, 47.6832670, 47.6832970, 47.6833080, 47.6833410, 47.6833530, 47.6833860, 47.6833980, 47.6834350, 47.6834480, 47.6834860, 47.6834970, 47.6835310, 47.6835430, 47.6835790, 47.6835900, 47.6836260, 47.6836360, 47.6836700, 47.6836810, 47.6837190, 47.6837320, 47.6837660, 47.6837770, 47.6838090, 47.6838160, 47.6838360, 47.6838520, 47.6838800, 47.6838890, 47.6839080, 47.6839210, 47.6839290, 47.6839400, 47.6839550, 47.6839860, 47.6839960, 47.6840270, 47.6840380, 47.6840750, 47.6840870, 47.6841220, 47.6841330, 47.6841600, 47.6841980, 47.6842110, 47.6842460, 47.6842580, 47.6842870, 47.6842970, 47.6843290, 47.6843390, 47.6843710, 47.6843810, 47.6844170, 47.6844300, 47.6844660 };
//float glon[] = { 40.2027440, 40.2027030, 40.2026590, 40.2026190, 40.2026070, 40.2025790, 40.2025640, 40.2025450, 40.2025240, 40.2025040, 40.2024910, 40.2024070, 40.2023810, 40.2023810, 40.2023990, 40.2023980, 40.2023560, 40.2023350, 40.2023180, 40.2022950, 40.2022570, 40.2022230, 40.2022130, 40.2021820, 40.2021680, 40.2021580, 40.2021540, 40.2021500, 40.2021430, 40.2021380, 40.2021320, 40.2021290, 40.2021220, 40.2021050, 40.2020960, 40.2020880, 40.2020530, 40.2020390, 40.2020300, 40.2020190, 40.2020100, 40.2020020, 40.2019880, 40.2019830, 40.2019790, 40.2019750, 40.2019710, 40.2019660, 40.2019620, 40.2019580, 40.2019530, 40.2019490, 40.2019320, 40.2019190, 40.2019060, 40.2018900, 40.2018720, 40.2018520, 40.2018190, 40.2018070, 40.2017640, 40.2017490, 40.2016960, 40.2016800, 40.2016550, 40.2016350, 40.2016180, 40.2016010, 40.2015890, 40.2015770, 40.2015670, 40.2015560, 40.2015390, 40.2015220, 40.2015060, 40.2014880, 40.2014540, 40.2014440, 40.2014130, 40.2014020, 40.2013670, 40.2013550, 40.2013350, 40.2013150, 40.2012930, 40.2012720, 40.2012510, 40.2012260, 40.2012070, 40.2011910, 40.2011810, 40.2011720, 40.2011640, 40.2011570, 40.2011460, 40.2011260, 40.2010980, 40.2010750, 40.2010550, 40.2010340, 40.2010050, 40.2009940, 40.2009840, 40.2009660, 40.2009460, 40.2009190, 40.2009110, 40.2008770, 40.2008640, 40.2008380, 40.2008160, 40.2007980, 40.2007790, 40.2007710, 40.2007670, 40.2007590, 40.2007440, 40.2007300, 40.2007160, 40.2007030, 40.2006930, 40.2006830, 40.2006700, 40.2006600, 40.2006480, 40.2006400, 40.2006440, 40.2006490, 40.2006610, 40.2006810, 40.2006990, 40.2007120, 40.2007250, 40.2007340, 40.2007440, 40.2007520, 40.2007590, 40.2007650, 40.2007820, 40.2007870, 40.2008030, 40.2008090, 40.2008350, 40.2008440, 40.2008600, 40.2008780, 40.2008920, 40.2009030, 40.2009170, 40.2009270, 40.2009310, 40.2009360, 40.2009470, 40.2009540, 40.2009600, 40.2009740, 40.2009820, 40.2009850, 40.2009960, 40.2010050, 40.2010270, 40.2010350, 40.2010440, 40.2010650, 40.2010740, 40.2010820, 40.2010900, 40.2010970, 40.2011040, 40.2011040, 40.2011110, 40.2011190, 40.2011290, 40.2011400, 40.2011510, 40.2011700, 40.2011790, 40.2012000, 40.2012040, 40.2012100, 40.2012190, 40.2012230, 40.2012270, 40.2012280, 40.2012200, 40.2012150, 40.2011860, 40.2011760, 40.2011340, 40.2010890, 40.2010470, 40.2009930, 40.2009760, 40.2009260, 40.2009110, 40.2008630, 40.2008480, 40.2008200, 40.2008090, 40.2007970, 40.2007750, 40.2007610, 40.2007510, 40.2007380, 40.2007210, 40.2007030, 40.2006890, 40.2006750, 40.2006620, 40.2006450, 40.2006260, 40.2005930, 40.2005790, 40.2005660, 40.2005450, 40.2005300, 40.2005130, 40.2004970, 40.2004680, 40.2004560, 40.2004430, 40.2004170, 40.2004050, 40.2003920, 40.2003720, 40.2003540, 40.2003400, 40.2003240, 40.2003180, 40.2003300, 40.2003320, 40.2003310, 40.2003350, 40.2003350, 40.2003330, 40.2003320, 40.2003340, 40.2003360, 40.2003390, 40.2003430, 40.2003460, 40.2003500, 40.2003540, 40.2003580, 40.2003630, 40.2003690, 40.2003700, 40.2003690, 40.2003680, 40.2003670, 40.2003650, 40.2003640, 40.2003640, 40.2003640, 40.2003570, 40.2003480, 40.2003520, 40.2003450, 40.2003300, 40.2003060, 40.2002820, 40.2002410, 40.2002260, 40.2001760, 40.2001580, 40.2001240, 40.2000710, 40.2000520, 40.2000130, 40.1999590, 40.1999400, 40.1999060, 40.1998750, 40.1998370, 40.1998240, 40.1997870, 40.1997750, 40.1997360, 40.1997230, 40.1996770, 40.1996620, 40.1996100, 40.1995930, 40.1995420, 40.1995230, 40.1994680, 40.1994500, 40.1994000, 40.1993830, 40.1993340, 40.1993200, 40.1992720, 40.1992590, 40.1992200, 40.1992090, 40.1991800, 40.1991730, 40.1991470, 40.1991370, 40.1991150, 40.1991100, 40.1990970, 40.1990930, 40.1990830, 40.1990800, 40.1990780, 40.1990770, 40.1990900, 40.1990980, 40.1991120, 40.1991160, 40.1991310, 40.1991370, 40.1991590, 40.1991670, 40.1991980, 40.1992140, 40.1992500, 40.1992830, 40.1993240, 40.1993380, 40.1993620, 40.1993830, 40.1993900, 40.1994070, 40.1994130, 40.1994250, 40.1994290, 40.1994330, 40.1994360, 40.1994340, 40.1994350, 40.1994380, 40.1994400, 40.1994470, 40.1994510, 40.1994570, 40.1994620, 40.1994640, 40.1994750, 40.1994780, 40.1994830, 40.1994860, 40.1994980, 40.1995010, 40.1995060, 40.1995080, 40.1995110, 40.1995100, 40.1995080, 40.1995100, 40.1995140, 40.1995160, 40.1995170, 40.1995130, 40.1995110, 40.1995080, 40.1995070, 40.1995030, 40.1995020, 40.1995060, 40.1995080, 40.1995130, 40.1995140, 40.1995140, 40.1995130, 40.1995080, 40.1995070, 40.1995080, 40.1995070, 40.1995110, 40.1995140, 40.1995220, 40.1995250, 40.1995320, 40.1995380, 40.1995490, 40.1995530, 40.1995610, 40.1995640, 40.1995720, 40.1995760, 40.1995830, 40.1995840, 40.1995880, 40.1995890, 40.1995960, 40.1995980, 40.1996030, 40.1996060, 40.1996220, 40.1996290, 40.1996390, 40.1996430, 40.1996560, 40.1996620, 40.1996760, 40.1996910, 40.1997100, 40.1997150, 40.1997220, 40.1997200, 40.1997100, 40.1997050, 40.1996970, 40.1996880, 40.1996770, 40.1996760, 40.1996790, 40.1996800, 40.1996880, 40.1996910, 40.1996980, 40.1997020, 40.1997250, 40.1997330, 40.1997610, 40.1997690, 40.1997920, 40.1998000, 40.1998110, 40.1998230, 40.1998280, 40.1998440, 40.1998490, 40.1998600, 40.1998630, 40.1998660, 40.1998670, 40.1998680, 40.1998690, 40.1998710, 40.1998740, 40.1998710, 40.1998690, 40.1998670, 40.1998660, 40.1998700, 40.1998720, 40.1998840, 40.1998900, 40.1999050, 40.1999110, 40.1999280, 40.1999340, 40.1999400, 40.1999430, 40.1999470, 40.1999450, 40.1999440, 40.1999470, 40.1999500, 40.1999560, 40.1999580, 40.1999560, 40.1999540, 40.1999570, 40.1999600, 40.1999670, 40.1999710, 40.1999790, 40.1999800, 40.1999840, 40.1999870, 40.1999940, 40.1999970, 40.1999990, 40.1999980, 40.1999960, 40.1999960, 40.1999940, 40.1999930, 40.1999940, 40.1999980, 40.2000050, 40.2000130, 40.2000290, 40.2000370, 40.2000350, 40.2000340, 40.2000320, 40.2000260, 40.2000160, 40.2000110, 40.2000030, 40.1999970, 40.1999930, 40.1999930, 40.1999950, 40.2000010, 40.2000070, 40.2000160, 40.2000280, 40.2000350, 40.2000400, 40.2000470, 40.2000570, 40.2000630, 40.2000710, 40.2000800, 40.2001020, 40.2001110, 40.2001350, 40.2001430, 40.2001570, 40.2001620, 40.2001740, 40.2001800, 40.2001910, 40.2002080, 40.2002160, 40.2002330, 40.2002360, 40.2002310, 40.2002290, 40.2002290, 40.2002310, 40.2002340, 40.2002360, 40.2002460, 40.2002510, 40.2002590, 40.2002610, 40.2002610, 40.2002610, 40.2002630, 40.2002660, 40.2002770, 40.2002810, 40.2002830, 40.2002850, 40.2002930, 40.2002960, 40.2003000, 40.2003010, 40.2003120, 40.2003160, 40.2003170, 40.2003160, 40.2003180, 40.2003170, 40.2003110, 40.2003100, 40.2003190, 40.2003220, 40.2003290, 40.2003330, 40.2003510, 40.2003570, 40.2003730, 40.2003780, 40.2003860, 40.2003890, 40.2004010, 40.2004050, 40.2004130, 40.2004150, 40.2004180, 40.2004200, 40.2004260, 40.2004280, 40.2004380, 40.2004410, 40.2004470, 40.2004500, 40.2004490, 40.2004510, 40.2004590, 40.2004630, 40.2004650, 40.2004710, 40.2004770, 40.2004800, 40.2004810, 40.2004840, 40.2004860, 40.2004990, 40.2005040, 40.2005200, 40.2005250, 40.2005320, 40.2005460, 40.2005500, 40.2005560, 40.2005580, 40.2005590, 40.2005600, 40.2005630, 40.2005640, 40.2005630, 40.2005640, 40.2005700, 40.2005730, 40.2005770 };
float glat[] = {47.6750700,47.6750590,47.6750440,47.6750370,47.6750320,47.6750270,47.6750230,47.6750130,47.6750020,47.6749920,47.6749850,47.6749760,47.6749640,47.6749530,47.6749410,47.6749250,47.6749130,47.6749010,47.6748890,47.6748790,47.6748690,47.6748590,47.6748490,47.6748370,47.6748250,47.6748150,47.6748030,47.6747910,47.6747790,47.6747690,47.6747590,47.6747470,47.6747360,47.6747230,47.6746770,47.6746440,47.6746120,47.6745910,47.6745870,47.6745690,47.6745600,47.6745520,47.6745320,47.6745250,47.6745180,47.6745050,47.6744900,47.6744620,47.6744530,47.6744280,47.6744200,47.6743990,47.6743930,47.6743800,47.6743680,47.6743610,47.6743510,47.6743430,47.6743310,47.6743180,47.6743100,47.6743000,47.6742920,47.6742810,47.6742660,47.6742560,47.6742440,47.6742310,47.6742190,47.6742060,47.6741940,47.6741830,47.6741710,47.6741600,47.6741500,47.6741410,47.6741300,47.6741120,47.6741060,47.6741000,47.6740830,47.6740760,47.6740670,47.6740560,47.6740380,47.6740320,47.6740220,47.6740110,47.6740040,47.6739950,47.6739860,47.6739800,47.6739740,47.6739640,47.6739510,47.6739370,47.6739100,47.6739010,47.6738710,47.6738620,47.6738410,47.6738330,47.6738110,47.6738030,47.6737800,47.6737730,47.6737570,47.6737520,47.6737420,47.6737320,47.6737230,47.6737100,47.6737010,47.6736840,47.6736760,47.6736680,47.6736520,47.6736370,47.6736240,47.6736120,47.6735950,47.6735760,47.6735700,47.6735580,47.6735440,47.6735190,47.6735100,47.6734920,47.6734700,47.6734630,47.6734430,47.6734360,47.6734240,47.6734180,47.6734070,47.6733900,47.6733820,47.6733750,47.6733620,47.6733500,47.6733330,47.6733260,47.6733190,47.6733080,47.6732970,47.6732850,47.6732750,47.6732660,47.6732550,47.6732340,47.6732260,47.6732140,47.6732030,47.6731930,47.6731840,47.6731750,47.6731650,47.6731560,47.6731400,47.6731330,47.6731250,47.6731170,47.6731030,47.6730870,47.6730660,47.6730590,47.6730460,47.6730310,47.6730170,47.6730030,47.6729890,47.6729760,47.6729650,47.6729550,47.6729440,47.6729320,47.6729220,47.6729090,47.6728940,47.6728790,47.6728660,47.6728530,47.6728410,47.6728270,47.6728170,47.6728050,47.6727760,47.6727650,47.6727510,47.6727390,47.6727260,47.6727110,47.6726880,47.6726880,47.6726780,47.6726690,47.6726630,47.6726570,47.6726500,47.6726410,47.6726310,47.6726200,47.6726090,47.6725980,47.6725790,47.6725720,47.6725440,47.6725300,47.6725010,47.6724900,47.6724750,47.6724670,47.6724590,47.6724490,47.6724430,47.6724410,47.6724330,47.6724160,47.6724080,47.6724010,47.6723900,47.6723790,47.6723670,47.6723580,47.6723470,47.6723390,47.6723270,47.6723220,47.6723180,47.6723100,47.6723040,47.6722910,47.6722870,47.6722790,47.6722660,47.6722430,47.6722340,47.6722070,47.6721970,47.6721770,47.6721720,47.6721560,47.6721490,47.6721450,47.6721430,47.6721430,47.6721390,47.6721350,47.6721310,47.6721170,47.6721120,47.6721060,47.6720920,47.6720860,47.6720810,47.6720700,47.6720420,47.6720320,47.6720230,47.6720100,47.6720050,47.6719990,47.6719840,47.6719690,47.6719590,47.6719530,47.6719350,47.6719270,47.6719200,47.6719120,47.6719100,47.6719170,47.6719260,47.6719270,47.6719170,47.6719120,47.6719050,47.6718990,47.6718930,47.6718830,47.6718700,47.6718590,47.6718490,47.6718400,47.6718280,47.6718080,47.6718000,47.6717910,47.6717820,47.6717730,47.6717670,47.6717570,47.6717540,47.6717500,47.6717430,47.6717350,47.6717290,47.6717200,47.6717090,47.6716900,47.6716830,47.6716620,47.6716540,47.6716370,47.6716220,47.6716070,47.6715940,47.6715850,47.6715750,47.6715630,47.6715520,47.6715420,47.6715330,47.6715230,47.6715150,47.6715090,47.6714990,47.6714950,47.6714790,47.6714730,47.6714600,47.6714470,47.6714320,47.6714180,47.6714060,47.6713950,47.6713800,47.6713780,47.6713690,47.6713580,47.6713430,47.6713200,47.6713140,47.6713030,47.6712920,47.6712820,47.6712740,47.6712680,47.6712600,47.6712490,47.6712440,47.6712280,47.6712220,47.6712080,47.6712060,47.6711920,47.6711870,47.6711790,47.6711710,47.6711670,47.6711610,47.6711470,47.6711410,47.6711350,47.6711250,47.6711140,47.6710860,47.6710740,47.6710460,47.6710370,47.6710190,47.6710060,47.6709980,47.6709820,47.6709680,47.6709590,47.6709480,47.6709440,47.6709410,47.6709370,47.6709340,47.6709330,47.6709340,47.6709340,47.6709330,47.6709370,47.6709360,47.6709360,47.6709450,47.6709470,47.6709380,47.6709330,47.6709130,47.6709070,47.6709020,47.6708990,47.6708960,47.6708960,47.6708980,47.6709000,47.6709030,47.6709080,47.6709100,47.6709100,47.6709110,47.6709100,47.6709040,47.6708970,47.6708950,47.6708930,47.6708870,47.6708790,47.6708730,47.6708700,47.6708650,47.6708600,47.6708580,47.6708570,47.6708570,47.6708570,47.6708550,47.6708500,47.6708450,47.6708360,47.6708330,47.6708270,47.6708170,47.6708090,47.6707980,47.6707930,47.6707890,47.6707820,47.6707730,47.6707610,47.6707560,47.6707570,47.6707590,47.6707570,47.6707660,47.6707770,47.6707880,47.6707940,47.6707980,47.6707990,47.6707980,47.6707990,47.6707940,47.6707930,47.6707910,47.6707880,47.6707850,47.6707830,47.6707900,47.6707940,47.6707930,47.6707920,47.6707830,47.6707780,47.6707680,47.6707600,47.6707540,47.6707520,47.6707510,47.6707460,47.6707420,47.6707390,47.6707330,47.6707270,47.6707180,47.6707090,47.6707000,47.6706920,47.6706880,47.6706870,47.6706890,47.6706890,47.6706940,47.6707020,47.6707150,47.6707300,47.6707470,47.6707650,47.6707810,47.6707990,47.6708170,47.6708340,47.6708510,47.6708690,47.6708840,47.6709000,47.6709140,47.6709290,47.6709430,47.6709560,47.6709710,47.6709880,47.6710000,47.6710150,47.6710330,47.6710480,47.6710650,47.6710800,47.6711070,47.6711160,47.6711250,47.6711340,47.6711430,47.6711590,47.6711650,47.6711760,47.6711880,47.6712020,47.6712420,47.6712610,47.6712890,47.6713190,47.6713290,47.6713620,47.6713720,47.6714000,47.6714090,47.6714320,47.6714390,47.6714510,47.6714610,47.6714580,47.6714730,47.6714820,47.6714920,47.6715070,47.6715230,47.6715520,47.6715610,47.6715930,47.6716030,47.6716370,47.6716460,47.6716790,47.6716870,47.6716990,47.6717070,47.6717150,47.6717220,47.6717270,47.6717310,47.6717350,47.6717410,47.6717480,47.6717510,47.6717560,47.6717610,47.6717650,47.6717780,47.6717950,47.6718120,47.6718310,47.6718460,47.6718590,47.6718820,47.6718900,47.6718990,47.6719170,47.6719240,47.6719310,47.6719460,47.6719620,47.6719900,47.6719990,47.6720290,47.6720380,47.6720630,47.6720710,47.6720840,47.6720950,47.6721060,47.6721110,47.6721200,47.6721330,47.6721460,47.6721590,47.6721740,47.6721890,47.6722000,47.6722110,47.6722230,47.6722400,47.6722470,47.6722540,47.6722690,47.6722760,47.6722830,47.6722950,47.6723090,47.6723280,47.6723340,47.6723410,47.6723540,47.6723670,47.6723800,47.6723920,47.6724040};
float glon[] = {40.2032460,40.2032400,40.2032280,40.2032170,40.2032110,40.2032050,40.2032010,40.2031860,40.2031720,40.2031590,40.2031500,40.2031400,40.2031280,40.2031140,40.2031020,40.2030680,40.2030480,40.2030300,40.2030110,40.2029930,40.2029760,40.2029610,40.2029470,40.2029210,40.2028980,40.2028840,40.2028690,40.2028530,40.2028350,40.2028140,40.2027920,40.2027720,40.2027550,40.2027400,40.2026010,40.2024730,40.2023450,40.2023100,40.2023000,40.2022800,40.2022720,40.2022650,40.2022450,40.2022350,40.2022240,40.2022130,40.2021970,40.2021770,40.2021730,40.2021460,40.2021370,40.2021090,40.2020990,40.2020830,40.2020690,40.2020520,40.2020340,40.2020160,40.2020020,40.2019870,40.2019710,40.2019530,40.2019300,40.2019110,40.2018920,40.2018810,40.2018670,40.2018550,40.2018460,40.2018330,40.2018190,40.2018050,40.2017890,40.2017750,40.2017620,40.2017480,40.2017330,40.2017130,40.2017050,40.2016980,40.2016780,40.2016660,40.2016470,40.2016240,40.2015900,40.2015790,40.2015630,40.2015470,40.2015400,40.2015340,40.2015240,40.2015030,40.2014950,40.2014820,40.2014720,40.2014580,40.2014330,40.2014240,40.2014000,40.2013910,40.2013600,40.2013500,40.2013200,40.2013110,40.2012820,40.2012730,40.2012400,40.2012290,40.2012080,40.2011910,40.2011920,40.2011840,40.2011730,40.2011580,40.2011530,40.2011480,40.2011460,40.2011450,40.2011460,40.2011430,40.2011290,40.2011130,40.2011080,40.2010920,40.2010760,40.2010450,40.2010320,40.2009990,40.2009510,40.2009340,40.2008960,40.2008840,40.2008670,40.2008660,40.2008580,40.2008460,40.2008400,40.2008340,40.2008210,40.2008110,40.2007910,40.2007820,40.2007730,40.2007570,40.2007430,40.2007270,40.2007080,40.2006890,40.2006730,40.2006430,40.2006340,40.2006180,40.2006020,40.2005850,40.2005690,40.2005570,40.2005460,40.2005390,40.2005290,40.2005240,40.2005190,40.2005140,40.2004990,40.2004840,40.2004580,40.2004490,40.2004300,40.2004140,40.2003980,40.2003840,40.2003740,40.2003610,40.2003450,40.2003300,40.2003140,40.2002990,40.2002860,40.2002730,40.2002610,40.2002500,40.2002370,40.2002220,40.2002070,40.2001890,40.2001660,40.2001460,40.2001480,40.2001540,40.2001730,40.2001900,40.2001970,40.2002040,40.2002320,40.2002320,40.2002540,40.2002750,40.2002940,40.2003160,40.2003350,40.2003500,40.2003690,40.2003870,40.2004070,40.2004260,40.2004580,40.2004680,40.2004950,40.2005030,40.2005080,40.2005080,40.2005230,40.2005420,40.2005610,40.2005780,40.2005950,40.2006060,40.2006200,40.2006430,40.2006530,40.2006640,40.2006870,40.2007070,40.2007250,40.2007390,40.2007580,40.2007760,40.2008000,40.2008090,40.2008190,40.2008380,40.2008610,40.2009110,40.2009310,40.2009760,40.2010160,40.2010650,40.2010800,40.2011210,40.2011320,40.2011640,40.2011750,40.2012000,40.2012140,40.2012230,40.2012300,40.2012240,40.2012350,40.2012420,40.2012500,40.2012770,40.2012850,40.2012930,40.2013150,40.2013250,40.2013340,40.2013470,40.2013520,40.2013660,40.2013750,40.2014010,40.2014130,40.2014240,40.2014390,40.2014540,40.2014700,40.2014880,40.2015120,40.2015170,40.2015230,40.2015400,40.2015670,40.2016060,40.2016560,40.2016720,40.2017170,40.2017300,40.2017580,40.2017810,40.2017880,40.2017980,40.2018070,40.2018190,40.2018350,40.2018480,40.2018630,40.2018920,40.2019030,40.2019190,40.2019400,40.2019600,40.2019790,40.2020080,40.2020190,40.2020290,40.2020420,40.2020580,40.2020710,40.2020890,40.2021080,40.2021400,40.2021490,40.2021750,40.2021830,40.2021950,40.2022000,40.2022080,40.2022200,40.2022240,40.2022330,40.2022430,40.2022530,40.2022680,40.2022850,40.2023020,40.2023200,40.2023440,40.2023860,40.2024010,40.2024380,40.2024490,40.2024690,40.2024840,40.2024980,40.2025070,40.2025190,40.2025300,40.2025380,40.2025390,40.2025530,40.2025690,40.2025850,40.2026140,40.2026220,40.2026360,40.2026520,40.2026680,40.2026860,40.2027030,40.2027280,40.2027680,40.2027800,40.2028160,40.2028270,40.2028690,40.2028820,40.2029190,40.2029290,40.2029470,40.2029640,40.2029760,40.2029900,40.2030050,40.2030270,40.2030350,40.2030440,40.2030620,40.2030850,40.2031230,40.2031360,40.2031670,40.2031740,40.2031840,40.2031960,40.2032100,40.2032230,40.2032350,40.2032500,40.2032780,40.2032900,40.2033010,40.2033180,40.2033400,40.2033590,40.2033830,40.2034030,40.2034280,40.2034600,40.2034740,40.2034870,40.2035100,40.2035350,40.2035770,40.2035930,40.2036410,40.2036570,40.2036840,40.2037090,40.2037350,40.2037610,40.2038020,40.2038170,40.2038390,40.2038640,40.2038860,40.2039050,40.2039240,40.2039320,40.2039460,40.2039750,40.2039880,40.2040010,40.2040240,40.2040460,40.2040710,40.2040950,40.2041180,40.2041450,40.2041850,40.2041990,40.2042440,40.2042590,40.2043030,40.2043150,40.2043420,40.2043610,40.2043840,40.2043930,40.2044040,40.2044170,40.2044290,40.2044410,40.2044660,40.2044790,40.2044910,40.2045170,40.2045350,40.2045510,40.2045760,40.2046160,40.2046310,40.2046530,40.2046740,40.2046940,40.2047140,40.2047340,40.2047550,40.2047740,40.2047970,40.2048210,40.2048400,40.2048620,40.2048880,40.2049210,40.2049350,40.2049490,40.2049870,40.2050020,40.2050390,40.2050580,40.2050720,40.2050920,40.2051130,40.2051330,40.2051650,40.2051780,40.2051900,40.2052210,40.2052330,40.2052440,40.2052620,40.2052830,40.2053020,40.2053190,40.2053390,40.2053600,40.2053830,40.2054070,40.2054520,40.2054660,40.2054890,40.2055090,40.2055260,40.2055340,40.2055370,40.2055420,40.2055440,40.2055430,40.2055460,40.2055510,40.2055570,40.2055630,40.2055690,40.2055730,40.2055800,40.2055890,40.2055950,40.2056000,40.2056040,40.2056090,40.2056130,40.2056180,40.2056200,40.2056180,40.2056210,40.2056380,40.2056410,40.2056440,40.2056480,40.2056510,40.2056570,40.2056590,40.2056630,40.2056670,40.2056710,40.2056660,40.2056610,40.2056590,40.2056610,40.2056630,40.2056730,40.2056770,40.2056940,40.2057020,40.2057290,40.2057360,40.2057470,40.2057580,40.2057760,40.2057950,40.2058010,40.2058080,40.2058170,40.2058290,40.2058440,40.2058480,40.2058560,40.2058580,40.2058540,40.2058510,40.2058460,40.2058410,40.2058310,40.2058260,40.2058270,40.2058300,40.2058340,40.2058400,40.2058440,40.2058550,40.2058720,40.2058980,40.2059250,40.2059360,40.2059470,40.2059570,40.2059610,40.2059650,40.2059650,40.2059660,40.2059690,40.2059810,40.2059870,40.2059920,40.2060080,40.2060150,40.2060230,40.2060340,40.2060460,40.2060660,40.2060730,40.2060920,40.2060980,40.2061200,40.2061280,40.2061450,40.2061620,40.2061750,40.2061800,40.2061890,40.2062020,40.2062180,40.2062330,40.2062500,40.2062710,40.2062830,40.2062970,40.2063100,40.2063310,40.2063410,40.2063500,40.2063720,40.2063810,40.2063900,40.2063990,40.2064100,40.2064300,40.2064340,40.2064390,40.2064480,40.2064610,40.2064720};

int maxsize = sizeof(glat) / sizeof(glat[0]);
int nextgps = 0;
///////////////////////////////////////////////// Блок пищалки
unsigned long previousMillis4 = 0;
bool buzzerState = false;
const unsigned long buzzerOnTime = 100;    // время включения (мс)
const unsigned long buzzerOffTime = 900;   // время выключения (мс)
const int buzzerFrequency = 500;   
bool Gbuzz=false;


//////////////////////////
void setup() {

  // Инициируем последовательный порт
  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(BP1, INPUT_PULLUP);
  pinMode(BP2, INPUT_PULLUP);
  pinMode(BP3, INPUT_PULLUP);
  pinMode(BP4, INPUT_PULLUP);

  pinMode(BUTTON_PIN, OUTPUT);     // пин нажатия на кнопку
  digitalWrite(BUTTON_PIN, HIGH);  // первичное выставление пина
  pinMode(dynPin, OUTPUT);

  // Подключаемся к WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  // Ждём подключения WiFi
  int k = 0;
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
    k = k + 1;
  }
  Serial.println();
  Serial.print("IP адрес: ");
  Serial.print(WiFi.localIP());
  Serial.print(" получен за ");
  Serial.print(k);
  Serial.println(" секунд/ы");
  // Подключаемся к серверу
  webSocket.begin(ADDR, PORT, URL);
  Serial.println("Подключаемся к серверу");
  // Метод событий WebSocket
  webSocket.onEvent(webSocketEvent);
  // Если соединение прервано, повторить попытку через 5 сек.
  webSocket.setReconnectInterval(5000);
}


void loop() {

  // Цикл WebSocket
  //Serial.println(digitalRead(16)); // после это строки не работает webSocket.loop
  unsigned long currentMillis = millis();  // текущее время

  // Проверяем, прошло ли 10 секунд
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;  // сохраняем время последней отправки

    //SendVoltage();  // отправляем данные
    //47.665989, 40.201729 каменоломни
    if (nextgps >= maxsize) {
      nextgps = 1;
      Serial.println("начинаем новый круг");
    }
    if (nextgps > 0) {
      SendGPS("lon", glon[nextgps]);
      SendGPS("lat", glat[nextgps]);

    } else {
      SendGPS("lon", 40.201729);
      SendGPS("lat", 47.665989);
      //срабатывает 1 раз
    }
    nextgps = nextgps + 1;
    //Serial.println();
  }
  if (currentMillis - previousMillis2 >= interval2) {
    previousMillis2 = currentMillis;
    SendVoltage();  // отправляем данные
  }
  if (currentMillis - previousMillis3 >= interval3) {
    previousMillis3 = currentMillis;
    //Serial.println("Действие каждую секунду");
    nextStateAndSend();
  }

  if (Gbuzz) {
    updateBuzzer();
  }



  webSocket.loop();
  static bool pState = false;
  /*
  bool state = !digitalRead(BUTTON_PIN);
  if (pState != state) {  // состояние изменилось
    pState = state;       // запомнить новое
    if (state) {
      Serial.println("Кнопка нажата");
    } else {
      Serial.println("Кнопка отпущена");
      //Gvoltage =analogRead(0) * VREF * ((DIV_R1 + DIV_R2) / DIV_R2) / 1024;

      nextStateAndSend();
    }
  }
  */

  //Serial.println(digitalRead(16));
  //delay(300);
  if (millis() % 1000 == 0) {

    // Если данные сервера были получены хотябы один раз
    if (rdata[0] != 0) {

      //Serial.println("Текущие данные сервера:");

      // Выводим массив данных в последовательный порт
      //for (size_t i = 0; i < glen; i++)
      //Serial.println(rdata[i]);
      if (!falseInit) {
        falseInit = true;
        mac = String(WiFi.macAddress());
        String mes1 = String("Connnected to server whis mac/sn: ") + mac;
        char JSONMessage[] = "{\"command\":\"registerDeviceClient\",\"DeviceClientUUID\":\"test1\"}";

        Serial.println("Передаём данные при первичном подключении к серверу");
        Serial.println(mes1);
        //webSocket.sendTXT(mac);

        DeserializationError error = deserializeJson(parsed, JSONMessage);

        String command = parsed["command"];
        String DeviceClientUUID = parsed["DeviceClientUUID"];
        //Serial.println(command);
        //Serial.println(DeviceClientUUID);

        //Serial.print("Final string value: ");
        parsed["DeviceClientUUID"] = mac;

        String updatedJson;
        serializeJson(parsed, updatedJson);
        Serial.println(updatedJson);


        webSocket.sendTXT(updatedJson);  // отправляем рег данные {"command":"registerDeviceClient","DeviceClientUUID":"A4:CF:12:BD:A3:66"}
      }
    }
  }
  // Если соединение WiFi прервано
  if (WiFi.status() != WL_CONNECTED) {
    //Вызываем функцию setup(), для повторного подключения
    Serial.println("Reconnect");
    setup();
  }
}

void SendVoltage() {
  Gvoltage = analogRead(0) * VREF * ((DIV_R1 + DIV_R2) / DIV_R2) / 1024;
  //Gvoltage = random(19, 30);
  if (Gvoltage != GcurretnVoltage) {
    char tmpj[] = "";
    StaticJsonDocument<300> sendData;
    deserializeJson(sendData, tmpj);
    sendData["command"] = "deviceDataChanged";
    sendData["deviceUUID"] = mac;
    sendData["deviceData"]["dataKey"] = "voltage";
    sendData["deviceData"]["dataValue"] = Gvoltage;
    String updatedJson;
    serializeJson(sendData, updatedJson);
    Serial.println(updatedJson);
    webSocket.sendTXT(updatedJson);

  } else {
    Serial.print(Gvoltage);
    Serial.println(" - данные не изменились");
  }
  GcurretnVoltage = Gvoltage;
}

void SendGPS(String param, float data) {
  //47.665989, 40.201729 каменоломни
  if ((GcurrentLat != data && param == "lat") || (GcurrentLon != data && param == "lon")) {
    char tmpj[] = "";
    StaticJsonDocument<300> sendData;
    deserializeJson(sendData, tmpj);
    sendData["command"] = "deviceDataChanged";
    sendData["deviceUUID"] = mac;
    sendData["deviceData"]["dataKey"] = param;
    sendData["deviceData"]["dataValue"] = data;
    String updatedJson;
    serializeJson(sendData, updatedJson);
    Serial.println(updatedJson);
    webSocket.sendTXT(updatedJson);
  }
  if (param == "lat") {
    GcurrentLat = data;
  } else {
    GcurrentLon = data;
  }
}

void nextStateAndSend() {
  char tmpj[] = "";


  if (tmpMode != Gmode) {
    Gmode = readdAllPins(BP1, BP2, BP3, BP4);
    delay(100);
    tmpMode = Gmode;
    StaticJsonDocument<300> sendData;
    deserializeJson(sendData, tmpj);
    sendData["command"] = "deviceDataChanged";
    sendData["deviceUUID"] = mac;
    sendData["deviceData"]["dataKey"] = "deviceStatus";
    sendData["deviceData"]["dataValue"] = Gmode * 25;
    String updatedJson;
    serializeJson(sendData, updatedJson);
    //Serial.println(updatedJson);
    //webSocket.sendTXT(updatedJson);
  } else {
    //Serial.println("Данные режима работы не изменились");
    Gmode = readdAllPins(BP1, BP2, BP3, BP4);
  }
}


void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {

  // Если тип данных двоичный и размер больше нуля
  if (type == WStype_TEXT && length > 0) {
    //Serial.println("ЭВЕНТ");
    String _payload = String((char*)&payload[0]);
    Serial.println(_payload);
    // Преобразуем данные из байтов в десятичные числа без знака
    const unsigned long* tmp = (unsigned long*)payload;
    // Вычисляем размер данных в новом формате
    const size_t len = length / sizeof(*rdata);

    // Записываем в глобальную переменную
    for (size_t i = 0; i < len && i < glen; i++) {
      rdata[i] = tmp[i];
    }
    // блок получения json
    StaticJsonDocument<300> getData;

    DeserializationError error = deserializeJson(getData, _payload);


    // Проверьте, удастся ли выполнить синтаксический анализ.
    if (error) {
      //Serial.print(F("deserializeJson() failed: "));
      //Serial.println(error.f_str());
      //Serial.println(_payload);
      return;
    } else {  //Вывести если ошибок нет

      //Serial.println("получен корректный JSON");
      bool state = getData["clientData"]["lampON"];
      //changeState(state);
      //delay(200);
      //Gmode = readdAllPins(BP1, BP2, BP3, BP4);
      String event = getData["deviceData"]["dataKey"];
      if (event == "deviceStatus") {  // изменён ползунок нажатия кнопки на сервере
        int tmode = getData["deviceData"]["dataValue"];
        setModeTo(Gmode, tmode / 25);
        Gmode = tmode / 25;
      }
      if (event == "lampON") {  // Нажата кнопка переключатель
        changeState(getData["deviceData"]["dataValue"]);
      }
      if (event == "alarm") { // включен спикер
      Serial.print("Активация ПИЩАНИЯ!!!!!");
        Gbuzz=getData["deviceData"]["dataValue"];
      }
    }
  }
}
int readdAllPins(int pin1, int pin2, int pin3, int pin4) {
  bool val1 = digitalRead(pin3);
  bool val2 = digitalRead(pin2);
  bool val3 = digitalRead(pin4);
  bool val4 = digitalRead(pin1);
  int mode = 0;
  if (val1) {
    //Serial.println("Пин 1");
    mode = 1;
  }
  if (val2) {
    //Serial.println("Пин 2");
    mode = 2;
  }
  if (val3) {
    //Serial.println("Пин 3");
    mode = 3;
  }
  if (val4) {
    //Serial.println("Пин 4");
    mode = 4;
  }
  //Serial.println("Текущий режим=" + String(mode));
  return mode;
}


void changeState(bool state) {
  if (state == false) {
    digitalWrite(LED_BUILTIN, HIGH);
    //digitalWrite(BUTTON_PIN, LOW);
    //delay(50);
    //digitalWrite(BUTTON_PIN, HIGH);  // Управление платой заблокировано
    Serial.println("Включено");
    offAll();
  }
  if (state == true) {
    digitalWrite(LED_BUILTIN, LOW);
    //digitalWrite(BUTTON_PIN, HIGH);
    Serial.println("Выключено");
  }
}

void offAll() {
  Serial.print("Выключаем из режима ");
  Serial.println(Gmode);
  int d = 50;
  if (Gmode == 1) {
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (Gmode == 2) {
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (Gmode == 3) {
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (Gmode == 4) {
    lowHigh(d);
  }
  if (Gmode == 0) {
    Serial.println("Устройство уже выключено");
  }
}

void lowHigh(int d) { // из включеного включить
  digitalWrite(BUTTON_PIN, LOW);
  delay(d);
  digitalWrite(BUTTON_PIN, HIGH);
}


void setModeTo(int modeold, int mode) {

  if (modeold != 0) {
    //Serial.println("Делаем предварительное отключение");
    offAll();  // выключаем всё
  }

  int d = 50;
  //Serial.print("Включаем режим ");
  //Serial.println(mode);
  delay(d);
  if (mode == 1) {
    //Serial.print("Режим:");
    //Serial.println(mode);
    lowHigh(d);
  }

  if (mode == 2) {
    //Serial.print("Режим:");
    //Serial.println(mode);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (mode == 3) {
    //Serial.print("Режим:");
    //Serial.println(mode);
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (mode == 4) {
    //Serial.print("Режим:");
    //Serial.println(mode);
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
}

void updateBuzzer() {
    unsigned long currentMillis = millis();
    
    if (!buzzerState) {
        // Если пищалка выключена, проверяем, не пора ли включить
        if (currentMillis - previousMillis4 >= buzzerOffTime) {
            tone(dynPin, buzzerFrequency);
            buzzerState = true;
            previousMillis4 = currentMillis;
            Serial.print("ПИК!");
        }
    } else {
        // Если пищалка включена, проверяем, не пора ли выключить
        if (currentMillis - previousMillis4 >= buzzerOnTime) {
            noTone(dynPin);
            buzzerState = false;
            previousMillis4 = currentMillis;
        }
    }
}