// Подключаем библиотеки

#include <WebSocketsClient.h>
#include "ArduinoJson.h"
#define VREF 3.27  // esp12 ~ 3.3
#define DIV_R1 50000
#define DIV_R2 2000

// Определяем название и пароль точки доступа
const char* ssid = "ITS";
const char* password = "daycom214";

// Определяем адрес сервера (например "192.168.1.3")
const char* ADDR = "test.websocket.alexrusakov.ru";  //

// Определяем url подключения
const char* URL = "/";

// Определяем порт
const uint16_t PORT = 7000;

// Создаём массив для отправки
int sdata[2]{ 1984, 11276 };

// Создаём массив для получения
unsigned long rdata[3]{ 0 };

// Кол-во элементов массива для получения
const size_t glen = sizeof(rdata) / sizeof(rdata[0]);
int Gmode = 0;    // глобалка, в которо хранится текущее состояние платы
int tmpMode = 0;  // глобалка для сравнения изменения состояния режима работы светильника
float Gvoltage = 0;
float GcurretnVoltage = 0;
float GcurrentLon = 0;
float GcurrentLat = 0;
// Создаём экземпляр класса клиента
WebSocketsClient webSocket;
StaticJsonDocument<300> parsed;

//общий json с исходными данными
char JSONSend[] = "{\"command\":\"setDeviceClientData\",\"clientUUID\":\"fd237235-cdd7-4a13-8258-test-ilia\",\"clientData\":{\"lampON\":true,\"deviceStatus\":0,\"buttonStatus\":\"down\",\"voltage\":5}}";
char jss[] = "{\"command\":\"deviceDataChanged\",\"deviceUUID\":\"01_10_2025_test_device1\",\"deviceData\":{\"dataKey\":\"deviceStatus\",\"dataValue\":50}}";
bool falseInit = false;  // разовая инициализация
String mac = "";

const long interval = 10000;  // период отправки состояния GPS
unsigned long previousMillis = 0;
const long interval2 = 60000;  // период отправки состояния АКБ
unsigned long previousMillis2 = 0;
const long interval3 = 1000;  // период отправки состояния Кнопки, если данные изменились
unsigned long previousMillis3 = 0;

#define BP1 14         // D5
#define BP2 4          // D2
#define BP3 5          // D1
#define BP4 16         // D0
#define BUTTON_PIN 12  // PIN D6

////////////////////////////////////////////////// тестовый массив координа со стравы
float glat[] = { 47.6758770, 47.6758570, 47.6758320, 47.6758160, 47.6758120, 47.6758060, 47.6758060, 47.6758030, 47.6758180, 47.6758770, 47.6758910, 47.6758140, 47.6758130, 47.6758580, 47.6758960, 47.6759330, 47.6759510, 47.6759570, 47.6759620, 47.6759720, 47.6760010, 47.6760240, 47.6760300, 47.6760610, 47.6760780, 47.6760950, 47.6761070, 47.6761180, 47.6761280, 47.6761350, 47.6761440, 47.6761520, 47.6761630, 47.6761820, 47.6761890, 47.6761960, 47.6762120, 47.6762180, 47.6762230, 47.6762290, 47.6762350, 47.6762390, 47.6762450, 47.6762460, 47.6762480, 47.6762490, 47.6762510, 47.6762530, 47.6762540, 47.6762560, 47.6762570, 47.6762590, 47.6762710, 47.6762860, 47.6762980, 47.6763070, 47.6763140, 47.6763150, 47.6763320, 47.6763390, 47.6763570, 47.6763610, 47.6763590, 47.6763570, 47.6763600, 47.6763670, 47.6763750, 47.6763880, 47.6764030, 47.6764190, 47.6764330, 47.6764440, 47.6764510, 47.6764600, 47.6764720, 47.6764860, 47.6765090, 47.6765150, 47.6765390, 47.6765460, 47.6765610, 47.6765640, 47.6765700, 47.6765760, 47.6765860, 47.6765950, 47.6766010, 47.6766010, 47.6766070, 47.6766250, 47.6766420, 47.6766520, 47.6766570, 47.6766600, 47.6766600, 47.6766600, 47.6766580, 47.6766560, 47.6766580, 47.6766620, 47.6766710, 47.6766760, 47.6766800, 47.6766910, 47.6767020, 47.6767250, 47.6767330, 47.6767490, 47.6767530, 47.6767590, 47.6767670, 47.6767730, 47.6767810, 47.6767870, 47.6767960, 47.6768080, 47.6768210, 47.6768330, 47.6768440, 47.6768570, 47.6768700, 47.6768830, 47.6768950, 47.6769070, 47.6769210, 47.6769360, 47.6769530, 47.6769690, 47.6769790, 47.6769880, 47.6769990, 47.6770090, 47.6770220, 47.6770360, 47.6770510, 47.6770640, 47.6770760, 47.6770900, 47.6771180, 47.6771270, 47.6771570, 47.6771670, 47.6771940, 47.6772020, 47.6772130, 47.6772210, 47.6772290, 47.6772360, 47.6772450, 47.6772530, 47.6772650, 47.6772780, 47.6772950, 47.6773020, 47.6773100, 47.6773230, 47.6773380, 47.6773510, 47.6773610, 47.6773680, 47.6773840, 47.6773900, 47.6773960, 47.6774220, 47.6774330, 47.6774430, 47.6774520, 47.6774600, 47.6774720, 47.6774720, 47.6774850, 47.6774970, 47.6775120, 47.6775280, 47.6775440, 47.6775690, 47.6775780, 47.6776110, 47.6776230, 47.6776500, 47.6776760, 47.6776850, 47.6777010, 47.6777160, 47.6777420, 47.6777520, 47.6777810, 47.6777870, 47.6777960, 47.6777930, 47.6777900, 47.6777870, 47.6777860, 47.6777890, 47.6777930, 47.6777860, 47.6777830, 47.6777930, 47.6777970, 47.6778000, 47.6778070, 47.6778190, 47.6778370, 47.6778500, 47.6778660, 47.6778780, 47.6778890, 47.6778990, 47.6779060, 47.6779120, 47.6779140, 47.6779200, 47.6779240, 47.6779270, 47.6779340, 47.6779430, 47.6779530, 47.6779590, 47.6779640, 47.6779630, 47.6779630, 47.6779690, 47.6779730, 47.6779770, 47.6779860, 47.6779950, 47.6780010, 47.6780050, 47.6780090, 47.6780050, 47.6780000, 47.6779960, 47.6779900, 47.6779840, 47.6779760, 47.6779740, 47.6779740, 47.6779750, 47.6779740, 47.6779710, 47.6779700, 47.6779680, 47.6779670, 47.6779680, 47.6779700, 47.6779730, 47.6779740, 47.6779760, 47.6779790, 47.6779800, 47.6779810, 47.6779810, 47.6779790, 47.6779790, 47.6779750, 47.6779720, 47.6779740, 47.6779730, 47.6779730, 47.6779750, 47.6779830, 47.6779960, 47.6779990, 47.6780210, 47.6780290, 47.6780440, 47.6780640, 47.6780710, 47.6780850, 47.6780970, 47.6781000, 47.6781080, 47.6781170, 47.6781340, 47.6781390, 47.6781540, 47.6781580, 47.6781690, 47.6781710, 47.6781840, 47.6781870, 47.6782000, 47.6782040, 47.6782190, 47.6782220, 47.6782280, 47.6782300, 47.6782380, 47.6782400, 47.6782470, 47.6782480, 47.6782560, 47.6782590, 47.6782710, 47.6782750, 47.6782980, 47.6783070, 47.6783350, 47.6783440, 47.6783780, 47.6783890, 47.6784250, 47.6784370, 47.6784730, 47.6784850, 47.6785140, 47.6785250, 47.6785590, 47.6785700, 47.6785990, 47.6786090, 47.6786420, 47.6786520, 47.6786840, 47.6786940, 47.6787260, 47.6787350, 47.6787530, 47.6787760, 47.6788040, 47.6788140, 47.6788390, 47.6788730, 47.6788830, 47.6789150, 47.6789240, 47.6789590, 47.6789730, 47.6790090, 47.6790220, 47.6790530, 47.6790640, 47.6790940, 47.6791030, 47.6791360, 47.6791470, 47.6791770, 47.6792080, 47.6792180, 47.6792540, 47.6792640, 47.6793010, 47.6793110, 47.6793440, 47.6793550, 47.6793890, 47.6794000, 47.6794350, 47.6794500, 47.6794880, 47.6795010, 47.6795290, 47.6795640, 47.6795760, 47.6796130, 47.6796270, 47.6796570, 47.6796690, 47.6797030, 47.6797160, 47.6797500, 47.6797620, 47.6797960, 47.6798070, 47.6798390, 47.6798500, 47.6798830, 47.6798950, 47.6799330, 47.6799450, 47.6799820, 47.6799940, 47.6800340, 47.6800480, 47.6800750, 47.6801030, 47.6801410, 47.6801540, 47.6801900, 47.6802020, 47.6802360, 47.6802440, 47.6802710, 47.6802810, 47.6803140, 47.6803240, 47.6803610, 47.6803710, 47.6804070, 47.6804190, 47.6804490, 47.6804600, 47.6804910, 47.6805030, 47.6805300, 47.6805380, 47.6805530, 47.6805680, 47.6805930, 47.6806020, 47.6806190, 47.6806370, 47.6806640, 47.6806750, 47.6806900, 47.6807080, 47.6807380, 47.6807470, 47.6807810, 47.6807930, 47.6808280, 47.6808390, 47.6808690, 47.6808780, 47.6809080, 47.6809180, 47.6809480, 47.6809580, 47.6809840, 47.6809930, 47.6810200, 47.6810520, 47.6810630, 47.6811000, 47.6811120, 47.6811490, 47.6811610, 47.6811990, 47.6812120, 47.6812460, 47.6812580, 47.6812910, 47.6813020, 47.6813320, 47.6813400, 47.6813710, 47.6813830, 47.6814130, 47.6814230, 47.6814580, 47.6814690, 47.6815060, 47.6815170, 47.6815570, 47.6815710, 47.6816110, 47.6816240, 47.6816520, 47.6816840, 47.6816950, 47.6817290, 47.6817420, 47.6817700, 47.6817790, 47.6818100, 47.6818210, 47.6818500, 47.6818610, 47.6818880, 47.6818980, 47.6819330, 47.6819420, 47.6819770, 47.6819870, 47.6820200, 47.6820290, 47.6820640, 47.6820770, 47.6821080, 47.6821200, 47.6821500, 47.6821600, 47.6821780, 47.6821960, 47.6822150, 47.6822280, 47.6822420, 47.6822550, 47.6822650, 47.6822710, 47.6822730, 47.6822710, 47.6822670, 47.6822670, 47.6822660, 47.6822650, 47.6822670, 47.6822700, 47.6822740, 47.6822790, 47.6822820, 47.6822850, 47.6822910, 47.6822950, 47.6822970, 47.6823010, 47.6823090, 47.6823180, 47.6823310, 47.6823430, 47.6823660, 47.6823730, 47.6824040, 47.6824150, 47.6824540, 47.6824660, 47.6825070, 47.6825240, 47.6825550, 47.6825930, 47.6826050, 47.6826380, 47.6826480, 47.6826770, 47.6826860, 47.6827170, 47.6827270, 47.6827610, 47.6827710, 47.6828060, 47.6828170, 47.6828570, 47.6828700, 47.6829000, 47.6829280, 47.6829670, 47.6829800, 47.6830170, 47.6830300, 47.6830630, 47.6830730, 47.6831090, 47.6831190, 47.6831560, 47.6831670, 47.6832050, 47.6832170, 47.6832550, 47.6832670, 47.6832970, 47.6833080, 47.6833410, 47.6833530, 47.6833860, 47.6833980, 47.6834350, 47.6834480, 47.6834860, 47.6834970, 47.6835310, 47.6835430, 47.6835790, 47.6835900, 47.6836260, 47.6836360, 47.6836700, 47.6836810, 47.6837190, 47.6837320, 47.6837660, 47.6837770, 47.6838090, 47.6838160, 47.6838360, 47.6838520, 47.6838800, 47.6838890, 47.6839080, 47.6839210, 47.6839290, 47.6839400, 47.6839550, 47.6839860, 47.6839960, 47.6840270, 47.6840380, 47.6840750, 47.6840870, 47.6841220, 47.6841330, 47.6841600, 47.6841980, 47.6842110, 47.6842460, 47.6842580, 47.6842870, 47.6842970, 47.6843290, 47.6843390, 47.6843710, 47.6843810, 47.6844170, 47.6844300, 47.6844660 };
float glon[] = { 40.2027440, 40.2027030, 40.2026590, 40.2026190, 40.2026070, 40.2025790, 40.2025640, 40.2025450, 40.2025240, 40.2025040, 40.2024910, 40.2024070, 40.2023810, 40.2023810, 40.2023990, 40.2023980, 40.2023560, 40.2023350, 40.2023180, 40.2022950, 40.2022570, 40.2022230, 40.2022130, 40.2021820, 40.2021680, 40.2021580, 40.2021540, 40.2021500, 40.2021430, 40.2021380, 40.2021320, 40.2021290, 40.2021220, 40.2021050, 40.2020960, 40.2020880, 40.2020530, 40.2020390, 40.2020300, 40.2020190, 40.2020100, 40.2020020, 40.2019880, 40.2019830, 40.2019790, 40.2019750, 40.2019710, 40.2019660, 40.2019620, 40.2019580, 40.2019530, 40.2019490, 40.2019320, 40.2019190, 40.2019060, 40.2018900, 40.2018720, 40.2018520, 40.2018190, 40.2018070, 40.2017640, 40.2017490, 40.2016960, 40.2016800, 40.2016550, 40.2016350, 40.2016180, 40.2016010, 40.2015890, 40.2015770, 40.2015670, 40.2015560, 40.2015390, 40.2015220, 40.2015060, 40.2014880, 40.2014540, 40.2014440, 40.2014130, 40.2014020, 40.2013670, 40.2013550, 40.2013350, 40.2013150, 40.2012930, 40.2012720, 40.2012510, 40.2012260, 40.2012070, 40.2011910, 40.2011810, 40.2011720, 40.2011640, 40.2011570, 40.2011460, 40.2011260, 40.2010980, 40.2010750, 40.2010550, 40.2010340, 40.2010050, 40.2009940, 40.2009840, 40.2009660, 40.2009460, 40.2009190, 40.2009110, 40.2008770, 40.2008640, 40.2008380, 40.2008160, 40.2007980, 40.2007790, 40.2007710, 40.2007670, 40.2007590, 40.2007440, 40.2007300, 40.2007160, 40.2007030, 40.2006930, 40.2006830, 40.2006700, 40.2006600, 40.2006480, 40.2006400, 40.2006440, 40.2006490, 40.2006610, 40.2006810, 40.2006990, 40.2007120, 40.2007250, 40.2007340, 40.2007440, 40.2007520, 40.2007590, 40.2007650, 40.2007820, 40.2007870, 40.2008030, 40.2008090, 40.2008350, 40.2008440, 40.2008600, 40.2008780, 40.2008920, 40.2009030, 40.2009170, 40.2009270, 40.2009310, 40.2009360, 40.2009470, 40.2009540, 40.2009600, 40.2009740, 40.2009820, 40.2009850, 40.2009960, 40.2010050, 40.2010270, 40.2010350, 40.2010440, 40.2010650, 40.2010740, 40.2010820, 40.2010900, 40.2010970, 40.2011040, 40.2011040, 40.2011110, 40.2011190, 40.2011290, 40.2011400, 40.2011510, 40.2011700, 40.2011790, 40.2012000, 40.2012040, 40.2012100, 40.2012190, 40.2012230, 40.2012270, 40.2012280, 40.2012200, 40.2012150, 40.2011860, 40.2011760, 40.2011340, 40.2010890, 40.2010470, 40.2009930, 40.2009760, 40.2009260, 40.2009110, 40.2008630, 40.2008480, 40.2008200, 40.2008090, 40.2007970, 40.2007750, 40.2007610, 40.2007510, 40.2007380, 40.2007210, 40.2007030, 40.2006890, 40.2006750, 40.2006620, 40.2006450, 40.2006260, 40.2005930, 40.2005790, 40.2005660, 40.2005450, 40.2005300, 40.2005130, 40.2004970, 40.2004680, 40.2004560, 40.2004430, 40.2004170, 40.2004050, 40.2003920, 40.2003720, 40.2003540, 40.2003400, 40.2003240, 40.2003180, 40.2003300, 40.2003320, 40.2003310, 40.2003350, 40.2003350, 40.2003330, 40.2003320, 40.2003340, 40.2003360, 40.2003390, 40.2003430, 40.2003460, 40.2003500, 40.2003540, 40.2003580, 40.2003630, 40.2003690, 40.2003700, 40.2003690, 40.2003680, 40.2003670, 40.2003650, 40.2003640, 40.2003640, 40.2003640, 40.2003570, 40.2003480, 40.2003520, 40.2003450, 40.2003300, 40.2003060, 40.2002820, 40.2002410, 40.2002260, 40.2001760, 40.2001580, 40.2001240, 40.2000710, 40.2000520, 40.2000130, 40.1999590, 40.1999400, 40.1999060, 40.1998750, 40.1998370, 40.1998240, 40.1997870, 40.1997750, 40.1997360, 40.1997230, 40.1996770, 40.1996620, 40.1996100, 40.1995930, 40.1995420, 40.1995230, 40.1994680, 40.1994500, 40.1994000, 40.1993830, 40.1993340, 40.1993200, 40.1992720, 40.1992590, 40.1992200, 40.1992090, 40.1991800, 40.1991730, 40.1991470, 40.1991370, 40.1991150, 40.1991100, 40.1990970, 40.1990930, 40.1990830, 40.1990800, 40.1990780, 40.1990770, 40.1990900, 40.1990980, 40.1991120, 40.1991160, 40.1991310, 40.1991370, 40.1991590, 40.1991670, 40.1991980, 40.1992140, 40.1992500, 40.1992830, 40.1993240, 40.1993380, 40.1993620, 40.1993830, 40.1993900, 40.1994070, 40.1994130, 40.1994250, 40.1994290, 40.1994330, 40.1994360, 40.1994340, 40.1994350, 40.1994380, 40.1994400, 40.1994470, 40.1994510, 40.1994570, 40.1994620, 40.1994640, 40.1994750, 40.1994780, 40.1994830, 40.1994860, 40.1994980, 40.1995010, 40.1995060, 40.1995080, 40.1995110, 40.1995100, 40.1995080, 40.1995100, 40.1995140, 40.1995160, 40.1995170, 40.1995130, 40.1995110, 40.1995080, 40.1995070, 40.1995030, 40.1995020, 40.1995060, 40.1995080, 40.1995130, 40.1995140, 40.1995140, 40.1995130, 40.1995080, 40.1995070, 40.1995080, 40.1995070, 40.1995110, 40.1995140, 40.1995220, 40.1995250, 40.1995320, 40.1995380, 40.1995490, 40.1995530, 40.1995610, 40.1995640, 40.1995720, 40.1995760, 40.1995830, 40.1995840, 40.1995880, 40.1995890, 40.1995960, 40.1995980, 40.1996030, 40.1996060, 40.1996220, 40.1996290, 40.1996390, 40.1996430, 40.1996560, 40.1996620, 40.1996760, 40.1996910, 40.1997100, 40.1997150, 40.1997220, 40.1997200, 40.1997100, 40.1997050, 40.1996970, 40.1996880, 40.1996770, 40.1996760, 40.1996790, 40.1996800, 40.1996880, 40.1996910, 40.1996980, 40.1997020, 40.1997250, 40.1997330, 40.1997610, 40.1997690, 40.1997920, 40.1998000, 40.1998110, 40.1998230, 40.1998280, 40.1998440, 40.1998490, 40.1998600, 40.1998630, 40.1998660, 40.1998670, 40.1998680, 40.1998690, 40.1998710, 40.1998740, 40.1998710, 40.1998690, 40.1998670, 40.1998660, 40.1998700, 40.1998720, 40.1998840, 40.1998900, 40.1999050, 40.1999110, 40.1999280, 40.1999340, 40.1999400, 40.1999430, 40.1999470, 40.1999450, 40.1999440, 40.1999470, 40.1999500, 40.1999560, 40.1999580, 40.1999560, 40.1999540, 40.1999570, 40.1999600, 40.1999670, 40.1999710, 40.1999790, 40.1999800, 40.1999840, 40.1999870, 40.1999940, 40.1999970, 40.1999990, 40.1999980, 40.1999960, 40.1999960, 40.1999940, 40.1999930, 40.1999940, 40.1999980, 40.2000050, 40.2000130, 40.2000290, 40.2000370, 40.2000350, 40.2000340, 40.2000320, 40.2000260, 40.2000160, 40.2000110, 40.2000030, 40.1999970, 40.1999930, 40.1999930, 40.1999950, 40.2000010, 40.2000070, 40.2000160, 40.2000280, 40.2000350, 40.2000400, 40.2000470, 40.2000570, 40.2000630, 40.2000710, 40.2000800, 40.2001020, 40.2001110, 40.2001350, 40.2001430, 40.2001570, 40.2001620, 40.2001740, 40.2001800, 40.2001910, 40.2002080, 40.2002160, 40.2002330, 40.2002360, 40.2002310, 40.2002290, 40.2002290, 40.2002310, 40.2002340, 40.2002360, 40.2002460, 40.2002510, 40.2002590, 40.2002610, 40.2002610, 40.2002610, 40.2002630, 40.2002660, 40.2002770, 40.2002810, 40.2002830, 40.2002850, 40.2002930, 40.2002960, 40.2003000, 40.2003010, 40.2003120, 40.2003160, 40.2003170, 40.2003160, 40.2003180, 40.2003170, 40.2003110, 40.2003100, 40.2003190, 40.2003220, 40.2003290, 40.2003330, 40.2003510, 40.2003570, 40.2003730, 40.2003780, 40.2003860, 40.2003890, 40.2004010, 40.2004050, 40.2004130, 40.2004150, 40.2004180, 40.2004200, 40.2004260, 40.2004280, 40.2004380, 40.2004410, 40.2004470, 40.2004500, 40.2004490, 40.2004510, 40.2004590, 40.2004630, 40.2004650, 40.2004710, 40.2004770, 40.2004800, 40.2004810, 40.2004840, 40.2004860, 40.2004990, 40.2005040, 40.2005200, 40.2005250, 40.2005320, 40.2005460, 40.2005500, 40.2005560, 40.2005580, 40.2005590, 40.2005600, 40.2005630, 40.2005640, 40.2005630, 40.2005640, 40.2005700, 40.2005730, 40.2005770 };
int maxsize = sizeof(glat) / sizeof(glat[0]);
int nextgps = 0;
/////////////////////////////////////////////////
void setup() {

  // Инициируем последовательный порт
  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(BP1, INPUT_PULLUP);
  pinMode(BP2, INPUT_PULLUP);
  pinMode(BP3, INPUT_PULLUP);
  pinMode(BP4, INPUT_PULLUP);

  pinMode(BUTTON_PIN, OUTPUT);     // пин нажатия на кнопку
  digitalWrite(BUTTON_PIN, HIGH);  // первичное выставление пина

  // Подключаемся к WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  // Ждём подключения WiFi
  int k = 0;
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
    k = k + 1;
  }
  Serial.println();
  Serial.print("IP адрес: ");
  Serial.print(WiFi.localIP());
  Serial.print(" получен за ");
  Serial.print(k);
  Serial.println(" секунд/ы");
  // Подключаемся к серверу
  webSocket.begin(ADDR, PORT, URL);
  Serial.println("Подключаемся к серверу");
  // Метод событий WebSocket
  webSocket.onEvent(webSocketEvent);
  // Если соединение прервано, повторить попытку через 5 сек.
  webSocket.setReconnectInterval(5000);
}


void loop() {

  // Цикл WebSocket
  //Serial.println(digitalRead(16)); // после это строки не работает webSocket.loop
  unsigned long currentMillis = millis();  // текущее время

  // Проверяем, прошло ли 10 секунд
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;  // сохраняем время последней отправки

    //SendVoltage();  // отправляем данные
    //47.665989, 40.201729 каменоломни
    if (nextgps >= maxsize) {
      nextgps = 1;
      Serial.println("начинаем новый круг");
    }
    if (nextgps > 0) {
      SendGPS("lon", glon[nextgps]);
      SendGPS("lat", glat[nextgps]);

    } else {
      SendGPS("lon", 40.201729);
      SendGPS("lat", 47.665989);
      //срабатывает 1 раз
    }
    nextgps = nextgps + 1;
    //Serial.println();
  }
  if (currentMillis - previousMillis2 >= interval2) {
    previousMillis2 = currentMillis;
    SendVoltage();  // отправляем данные
  }
  if (currentMillis - previousMillis3 >= interval3) {
    previousMillis3 = currentMillis;
    //Serial.println("Действие каждую секунду");
    nextStateAndSend();
  }




  webSocket.loop();
  static bool pState = false;
  /*
  bool state = !digitalRead(BUTTON_PIN);
  if (pState != state) {  // состояние изменилось
    pState = state;       // запомнить новое
    if (state) {
      Serial.println("Кнопка нажата");
    } else {
      Serial.println("Кнопка отпущена");
      //Gvoltage =analogRead(0) * VREF * ((DIV_R1 + DIV_R2) / DIV_R2) / 1024;

      nextStateAndSend();
    }
  }
  */

  //Serial.println(digitalRead(16));
  //delay(300);
  if (millis() % 1000 == 0) {

    // Если данные сервера были получены хотябы один раз
    if (rdata[0] != 0) {

      //Serial.println("Текущие данные сервера:");

      // Выводим массив данных в последовательный порт
      //for (size_t i = 0; i < glen; i++)
      //Serial.println(rdata[i]);
      if (!falseInit) {
        falseInit = true;
        mac = String(WiFi.macAddress());
        String mes1 = String("Connnected to server whis mac/sn: ") + mac;
        char JSONMessage[] = "{\"command\":\"registerDeviceClient\",\"DeviceClientUUID\":\"test1\"}";

        Serial.println("Передаём данные при первичном подключении к серверу");
        Serial.println(mes1);
        //webSocket.sendTXT(mac);

        DeserializationError error = deserializeJson(parsed, JSONMessage);

        String command = parsed["command"];
        String DeviceClientUUID = parsed["DeviceClientUUID"];
        //Serial.println(command);
        //Serial.println(DeviceClientUUID);

        //Serial.print("Final string value: ");
        parsed["DeviceClientUUID"] = mac;

        String updatedJson;
        serializeJson(parsed, updatedJson);
        Serial.println(updatedJson);


        webSocket.sendTXT(updatedJson);  // отправляем рег данные {"command":"registerDeviceClient","DeviceClientUUID":"A4:CF:12:BD:A3:66"}
      }
    }
  }
  // Если соединение WiFi прервано
  if (WiFi.status() != WL_CONNECTED) {
    //Вызываем функцию setup(), для повторного подключения
    Serial.println("Reconnect");
    setup();
  }
}

void SendVoltage() {
  Gvoltage = analogRead(0) * VREF * ((DIV_R1 + DIV_R2) / DIV_R2) / 1024;
  //Gvoltage = random(19, 30);
  if (Gvoltage != GcurretnVoltage) {
    char tmpj[] = "";
    StaticJsonDocument<300> sendData;
    deserializeJson(sendData, tmpj);
    sendData["command"] = "deviceDataChanged";
    sendData["deviceUUID"] = mac;
    sendData["deviceData"]["dataKey"] = "voltage";
    sendData["deviceData"]["dataValue"] = Gvoltage;
    String updatedJson;
    serializeJson(sendData, updatedJson);
    Serial.println(updatedJson);
    webSocket.sendTXT(updatedJson);

  } else {
    Serial.println("Данные не изменились");
  }
  GcurretnVoltage = Gvoltage;
}

void SendGPS(String param, float data) {
  //47.665989, 40.201729 каменоломни
  if ((GcurrentLat != data && param == "lat") || (GcurrentLon != data && param == "lon")) {
    char tmpj[] = "";
    StaticJsonDocument<300> sendData;
    deserializeJson(sendData, tmpj);
    sendData["command"] = "deviceDataChanged";
    sendData["deviceUUID"] = mac;
    sendData["deviceData"]["dataKey"] = param;
    sendData["deviceData"]["dataValue"] = data;
    String updatedJson;
    serializeJson(sendData, updatedJson);
    Serial.println(updatedJson);
    webSocket.sendTXT(updatedJson);
  }
  if (param == "lat") {
    GcurrentLat = data;
  } else {
    GcurrentLon = data;
  }
}

void nextStateAndSend() {
  char tmpj[] = "";


  if (tmpMode != Gmode) {
    Gmode = readdAllPins(BP1, BP2, BP3, BP4);
    delay(100);
    tmpMode = Gmode;
    StaticJsonDocument<300> sendData;
    deserializeJson(sendData, tmpj);
    sendData["command"] = "deviceDataChanged";
    sendData["deviceUUID"] = mac;
    sendData["deviceData"]["dataKey"] = "deviceStatus";
    sendData["deviceData"]["dataValue"] = Gmode * 25;
    String updatedJson;
    serializeJson(sendData, updatedJson);
    //Serial.println(updatedJson);
    //webSocket.sendTXT(updatedJson);
  } else {
    //Serial.println("Данные режима работы не изменились");
    Gmode = readdAllPins(BP1, BP2, BP3, BP4);
  }
}


void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {

  // Если тип данных двоичный и размер больше нуля
  if (type == WStype_TEXT && length > 0) {
    //Serial.println("ЭВЕНТ");
    String _payload = String((char*)&payload[0]);
    Serial.println(_payload);
    // Преобразуем данные из байтов в десятичные числа без знака
    const unsigned long* tmp = (unsigned long*)payload;
    // Вычисляем размер данных в новом формате
    const size_t len = length / sizeof(*rdata);

    // Записываем в глобальную переменную
    for (size_t i = 0; i < len && i < glen; i++) {
      rdata[i] = tmp[i];
    }
    // блок получения json
    StaticJsonDocument<300> getData;

    DeserializationError error = deserializeJson(getData, _payload);


    // Проверьте, удастся ли выполнить синтаксический анализ.
    if (error) {
      //Serial.print(F("deserializeJson() failed: "));
      //Serial.println(error.f_str());
      //Serial.println(_payload);
      return;
    } else {  //Вывести если ошибок нет

      //Serial.println("получен корректный JSON");
      bool state = getData["clientData"]["lampON"];
      //changeState(state);
      //delay(200);
      //Gmode = readdAllPins(BP1, BP2, BP3, BP4);
      String event = getData["deviceData"]["dataKey"];
      if (event == "deviceStatus") {  // изменён ползунок нажатия кнопки на сервере
        int tmode = getData["deviceData"]["dataValue"];
        setModeTo(Gmode, tmode / 25);
        Gmode = tmode / 25;
      }
      if (event == "lampON") {  // Нажата кнопка переключатель
        changeState(getData["deviceData"]["dataValue"]);
      }
    }
  }
}
int readdAllPins(int pin1, int pin2, int pin3, int pin4) {
  bool val1 = digitalRead(pin3);
  bool val2 = digitalRead(pin2);
  bool val3 = digitalRead(pin4);
  bool val4 = digitalRead(pin1);
  int mode = 0;
  if (val1) {
    //Serial.println("Пин 1");
    mode = 1;
  }
  if (val2) {
    //Serial.println("Пин 2");
    mode = 2;
  }
  if (val3) {
    //Serial.println("Пин 3");
    mode = 3;
  }
  if (val4) {
    //Serial.println("Пин 4");
    mode = 4;
  }
  //Serial.println("Текущий режим=" + String(mode));
  return mode;
}


void changeState(bool state) {
  if (state == false) {
    digitalWrite(LED_BUILTIN, HIGH);
    //digitalWrite(BUTTON_PIN, LOW);
    //delay(50);
    //digitalWrite(BUTTON_PIN, HIGH);  // Управление платой заблокировано
    Serial.println("Включено");
    offAll();
  }
  if (state == true) {
    digitalWrite(LED_BUILTIN, LOW);
    //digitalWrite(BUTTON_PIN, HIGH);
    Serial.println("Выключено");
  }
}

void offAll() {
  Serial.print("Выключаем из режима ");
  Serial.println(Gmode);
  int d = 50;
  if (Gmode == 1) {
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (Gmode == 2) {
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (Gmode == 3) {
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (Gmode == 4) {
    lowHigh(d);
  }
  if (Gmode == 0) {
    Serial.println("Устройство уже выключено");
  }
}

void lowHigh(int d) { // из включеного включить
  digitalWrite(BUTTON_PIN, LOW);
  delay(d);
  digitalWrite(BUTTON_PIN, HIGH);
}


void setModeTo(int modeold, int mode) {

  if (modeold != 0) {
    //Serial.println("Делаем предварительное отключение");
    offAll();  // выключаем всё
  }

  int d = 50;
  //Serial.print("Включаем режим ");
  //Serial.println(mode);
  delay(d);
  if (mode == 1) {
    //Serial.print("Режим:");
    //Serial.println(mode);
    lowHigh(d);
  }

  if (mode == 2) {
    //Serial.print("Режим:");
    //Serial.println(mode);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (mode == 3) {
    //Serial.print("Режим:");
    //Serial.println(mode);
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
  if (mode == 4) {
    //Serial.print("Режим:");
    //Serial.println(mode);
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
    delay(d);
    lowHigh(d);
  }
}